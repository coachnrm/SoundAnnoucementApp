@page "/signature3"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory _httpClientFactory;

<h3>Sign Below</h3>

<div class="mb-3">
    <label for="opNoteDetailId" class="form-label">OpNoteDetailId</label>
    <input type="number" class="form-control" id="opNoteDetailId" @bind="OpNoteDetailId" />
</div>

<div @ref="signaturePad" class="signature-pad border" style="width:600px; height:300px; background-color:lightyellow;"></div>

<div class="mt-3">
    <button class="btn btn-primary" @onclick="SaveSignature">Save to Database</button>
    <button class="btn btn-secondary" @onclick="DownloadSignature">Download</button>
    <button class="btn btn-danger" @onclick="ClearSignature">Clear</button>
</div>

@if (!string.IsNullOrEmpty(statusMessage))
{
    <div class="alert @statusClass mt-3">@statusMessage</div>
}

@code {
    private ElementReference signaturePad;
    private string? SavedImage;
    private IJSObjectReference? signatureModule;
    private int OpNoteDetailId = 1;
    private string statusMessage = string.Empty;
    private string statusClass = "alert-success";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            signatureModule = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/signaturePad.js");
            await signatureModule.InvokeVoidAsync("initialize", signaturePad);
        }
    }

    private async Task SaveSignature()
    {
        if (signatureModule is null || OpNoteDetailId <= 0)
        {
            statusMessage = "Please enter a valid OpNoteDetailId";
            statusClass = "alert-danger";
            return;
        }

        try
        {
            // Get the signature as base64
            var imageData = await signatureModule.InvokeAsync<string>("saveSignature");
            var base64Data = imageData.Split(',')[1];
            var bytes = Convert.FromBase64String(base64Data);

            // Create form data
            using var content = new MultipartFormDataContent();
            
            // Add image file
            var imageContent = new ByteArrayContent(bytes);
            imageContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/png");
            content.Add(imageContent, "ImageFile", "signature.png");
            
            // Add OpNoteDetailId
            content.Add(new StringContent(OpNoteDetailId.ToString()), "OpNoteDetailId");

            // Send to API
            var httpClient = _httpClientFactory.CreateClient("OpApi"); 
            var response = await httpClient.PostAsync("api/OpNoteImage", content);

            if (response.IsSuccessStatusCode)
            {
                statusMessage = "Signature saved successfully!";
                statusClass = "alert-success";
            }
            else
            {
                statusMessage = $"Error saving signature: {await response.Content.ReadAsStringAsync()}";
                statusClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
            statusClass = "alert-danger";
        }
    }

    private async Task DownloadSignature()
    {
        if (signatureModule is not null)
        {
            await signatureModule.InvokeVoidAsync("downloadSignature");
        }
    }

    private async Task ClearSignature()
    {
        if (signatureModule is not null)
        {
            await signatureModule.InvokeVoidAsync("clearSignature");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (signatureModule is not null)
        {
            await signatureModule.DisposeAsync();
        }
    }
}
