@page "/calendar"
@using SoundAnnoucementApp.Models
@using System.Globalization

<h1>ปฏิทินกิจกรรม</h1>

<div>
    <button @onclick="GoToPreviousMonth">Previous</button>
    <label>Year:</label>
    <select @onchange="LoadYear">
        @foreach (int year in years)
        {
            <option value="@year" selected="@(year == selectedYear)">@year</option>
        }
    </select>

    <label>Month:</label>
    <select @onchange="LoadMonth">
        @foreach (string monthName in monthNames)
        {
            <option>@monthName</option>
        }
    </select>
    <button @onclick="GoToNextMonth">Next</button>
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
            {
                <th>
                    @days[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
        {
            <tr>
                @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                {
                    <td>
                        @weeks[weekIndex].Dates[dayIndex].DateValue
                        <br /><br />
                        <label style="color:#c00;font-weight:bold">@weeks[weekIndex].Dates[dayIndex].Note</label>
                        <br /><br />
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    List<int> years = new List<int>();

    int selectedYear = DateTime.Now.Year;
    string selectedMonth = DateTime.Now.ToString("MMMM", CultureInfo.CreateSpecificCulture("th-TH"));

    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    protected override void OnInitialized()
    {
        System.Globalization.CultureInfo.DefaultThreadCurrentCulture = new System.Globalization.CultureInfo("th-TH");
        System.Globalization.CultureInfo.DefaultThreadCurrentUICulture = new System.Globalization.CultureInfo("th-TH");
        // Generate years in Buddhist Era (BE)
        years = Enumerable.Range(DateTime.Now.Year - 10, 21)
                        .ToList();
        monthNames = System.Globalization.CultureInfo
            .CreateSpecificCulture("th-TH") // Thai culture
            .DateTimeFormat
            .MonthGenitiveNames
            .Where(m => !string.IsNullOrWhiteSpace(m))
            .ToList();
        
        @* monthNames = System.Globalization.CultureInfo
            .CreateSpecificCulture("en-US") // Use English culture for base month names
            .DateTimeFormat
            .MonthGenitiveNames
            .Where(m => !string.IsNullOrWhiteSpace(m))
            .Select(month => GetThaiMonthName(month)) // Map to Thai names
            .ToList(); *@

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    // Helper method to map English month names to Thai
    private string GetThaiMonthName(string month)
    {
        return month switch
        {
            "January" => "มกราคม",
            "February" => "กุมภาพันธ์",
            "March" => "มีนาคม",
            "April" => "เมษายน",
            "May" => "พฤษภาคม",
            "June" => "มิถุนายน",
            "July" => "กรกฎาคม",
            "August" => "สิงหาคม",
            "September" => "กันยายน",
            "October" => "ตุลาคม",
            "November" => "พฤศจิกายน",
            "December" => "ธันวาคม",
            _ => month // Fallback to original name if no match
        };
    }

    private void LoadYear(ChangeEventArgs e)
    {
        selectedYear = int.Parse(e.Value.ToString());
        UpdateCalendar();
    }

    private void LoadMonth(ChangeEventArgs e)
    {
        selectedMonth = e.Value.ToString();
        UpdateCalendar();
    }

    private void UpdateCalendar()
    {
        int monthIndex = DateTime.ParseExact(selectedMonth, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("th-TH")).Month;
        startDate = new DateTime(selectedYear, monthIndex, 1);
        endDate = (new DateTime(selectedYear, monthIndex, 1)).AddMonths(1).AddDays(-1);

        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    @* private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd", System.Globalization.CultureInfo.CreateSpecificCulture("th-TH")));
        }
        days = day1.Distinct().ToList();

        // Ensure distinct days and order starts with Sunday
        days = day1.Distinct().ToList();

        // Reorder to make Sunday the first day
        var sundayIndex = days.IndexOf("Sunday"); // "Sunday" is Sunday in Thai
        if (sundayIndex != -1)
        {
            days = days.Skip(sundayIndex).Concat(days.Take(sundayIndex)).ToList();
        }
    } *@
    private void GenerateCalendarHead()
    {
        var day1 = new List<string>
        {
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
        };

        days = day1.Select(day => GetThaiDayName(day)).ToList();
    }

    // Helper method to map English day names to Thai
    private string GetThaiDayName(string day)
    {
        return day switch
        {
            "Sunday" => "อาทิตย์",
            "Monday" => "จันทร์",
            "Tuesday" => "อังคาร",
            "Wednesday" => "พุธ",
            "Thursday" => "พฤหัสบดี",
            "Friday" => "ศุกร์",
            "Saturday" => "เสาร์",
            _ => day // Fallback to original name if no match
        };
    }

    @* private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();

        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;

            dates.Add(new DayEvent()
            {
                DateValue = dt.ToString("dd-MMM-yyyy"),
                //DayName = dt.ToString("dddd", System.Globalization.CultureInfo.CreateSpecificCulture("th-TH"))
                //DayName = dt.ToString("dddd", CultureInfo.CreateSpecificCulture("th-TH")) // Thai day name
            });

            if (flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }
            if (countdays == totalDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }
    } *@

    @* private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();

        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();

        // Add blank cells for days before the first day of the month
        int firstDayOfWeek = (int)startDate.DayOfWeek; // Sunday = 0, Monday = 1, ..., Saturday = 6
        for (int i = 0; i < firstDayOfWeek; i++)
        {
            dates.Add(new DayEvent { DateValue = "" }); // Empty cell
        }

        // Populate the actual dates
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            dates.Add(new DayEvent
            {
                DateValue = dt.ToString("dd-MMM-yyyy", CultureInfo.CreateSpecificCulture("th-TH")),
                Note = "" // Add any default note here if needed
            });

            // Add a new week if the current week is complete (7 days)
            if (dates.Count == 7)
            {
                week = new WeekClass { Dates = new List<DayEvent>(dates) };
                weeks.Add(week);
                dates.Clear();
            }
        }

        // Add remaining days to the last week if any
        if (dates.Count > 0)
        {
            while (dates.Count < 7) // Fill remaining days with empty cells
            {
                dates.Add(new DayEvent { DateValue = "" }); // Empty cell
            }
            week = new WeekClass { Dates = new List<DayEvent>(dates) };
            weeks.Add(week);
        }
    } *@

    private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();

        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();

        // Add blank cells for days before the first day of the month
        int firstDayOfWeek = (int)startDate.DayOfWeek; // Sunday = 0, Monday = 1, ..., Saturday = 6
        for (int i = 0; i < firstDayOfWeek; i++)
        {
            dates.Add(new DayEvent { DateValue = "" }); // Empty cell
        }

        // Populate the actual dates
        for (var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            // Get the Thai month name for the current date
            string thaiMonthName = GetThaiMonthName(monthNames[dt.Month - 1]);

            // Add the day event with the Thai month name
            dates.Add(new DayEvent
            {
                DateValue = $"{dt.Day}-{thaiMonthName}-{dt.Year + 543}", // Buddhist Era year
                Note = "" // Add any default note here if needed
            });

            // Add a new week if the current week is complete (7 days)
            if (dates.Count == 7)
            {
                week = new WeekClass { Dates = new List<DayEvent>(dates) };
                weeks.Add(week);
                dates.Clear();
            }
        }

        // Add remaining days to the last week if any
        if (dates.Count > 0)
        {
            while (dates.Count < 7) // Fill remaining days with empty cells
            {
                dates.Add(new DayEvent { DateValue = "" }); // Empty cell
            }
            week = new WeekClass { Dates = new List<DayEvent>(dates) };
            weeks.Add(week);
        }
    }

    private void GoToNextMonth()
    {
        // Increment the month
        int currentMonthIndex = DateTime.ParseExact(selectedMonth, "MMMM", CultureInfo.CreateSpecificCulture("th-TH")).Month - 1;
        currentMonthIndex++;

        if (currentMonthIndex >= 12) // If it's December, move to January of the next year
        {
            currentMonthIndex = 0;
            selectedYear++;
        }

        // Update selected month
        selectedMonth = monthNames[currentMonthIndex];
        UpdateCalendar();
    }

    private void GoToPreviousMonth()
    {
        // Decrement the month
        int currentMonthIndex = DateTime.ParseExact(selectedMonth, "MMMM", CultureInfo.CreateSpecificCulture("th-TH")).Month - 1;
        currentMonthIndex--;

        if (currentMonthIndex < 0) // If it's January, move to December of the previous year
        {
            currentMonthIndex = 11;
            selectedYear--;
        }

        // Update selected month
        selectedMonth = monthNames[currentMonthIndex];
        UpdateCalendar();
    }


}

