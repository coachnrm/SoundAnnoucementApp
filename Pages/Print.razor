@page "/print"
@using Microsoft.JSInterop
@using System.Text.Json;
@inject IJSRuntime JS

<button @onclick="GeneratePdf">Print</button>
<button @onclick="PrintPdf">Print PDF</button>
<!-- Canvas for the Chart -->
<canvas id="myChart" width="400" height="200"></canvas>


@code {
    // Define the title and content
        private string title = "Claim Id xxxxxxxxxx";
        private string content = "QN xxxx";
        private List<Person> persons = new List<Person>
        {
            new Person { FirstName = "สมชาย", LastName = "แข็งแรง" },
            new Person { FirstName = "สมหญิง", LastName = "รักเรียน" },
            new Person { FirstName = "สมควร", LastName = "ทำตาม" }
        };
     
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call JavaScript to render the chart
            await JS.InvokeVoidAsync("renderChart");
        }
    }

     private async Task GeneratePdf()
    {
        // Serialize the persons list into JSON
        var personsJson = JsonSerializer.Serialize(persons);

        // Call JavaScript function to generate the PDF with custom font
        await JS.InvokeVoidAsync("generatePdfWithFont", title, content, personsJson);
    }

    private async Task GeneratePdfWithGraph()
    {
        // Serialize the persons list into JSON
        var personsJson = JsonSerializer.Serialize(persons);

        // Call JavaScript function to generate the PDF with custom font
        await JS.InvokeVoidAsync("generatePdfWithGraph", title, content, personsJson);
    }

    private async Task PrintPdf()
    {
        await JS.InvokeVoidAsync("generateAndPrintPDF");
    }

    public class Person
    {
        public string FirstName {get; set;}
        public string LastName {get; set;}
    }
}