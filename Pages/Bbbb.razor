@page "/queuelist2"
@inject IJSRuntime JSRuntime
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using SoundAnnoucementApp.Dtos
@using SoundAnnoucementApp.Models
@using SoundAnnoucementApp.Services
@inject IHttpClientFactory _httpClientFactory
@inject NavigationManager NavigationManager
@inject QueueService QueueService
@implements IAsyncDisposable

<!-- Header Section -->
<div class="queue-header">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="page-title mb-1">ระบบจัดการคิวผู้ป่วย</h2>
            <p class="page-subtitle text-muted">จัดการคิวผู้ป่วยและประกาศเรียกคิว</p>
        </div>
        <div class="header-badge">
            <span class="badge bg-primary">
                <i class="fas fa-users me-1"></i>
                คิวทั้งหมด: 
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    @QueueCount
                }
            </span>
        </div>
    </div>

    <!-- Filter Controls -->
    <div class="filter-controls card">
        <div class="card-body py-3">
            <div class="row g-3 align-items-center">
                <div class="col-md-5">
                    <label class="form-label fw-bold">ชื่อผู้ป่วยที่จะประกาศ</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                        <InputText class="form-control" @bind-Value="userName" placeholder="กรอกชื่อผู้ป่วย" />
                    </div>
                </div>
                
                <div class="col-md-3">
                        <label class="form-label fw-bold">ห้องตรวจ</label>
                        <div class="input-group">
                            <span class="input-group-text"><i class="fas fa-hospital"></i></span>
                            <select class="form-select" value="selectedDepartment" @onchange="(e) => OnDepartmentChanged(e)">
                                <option value="">ทั้งหมด</option>
                                @if (availableDepartments?.Count > 0)
                                {
                                    @foreach (var dept in availableDepartments)
                                    {
                                        <option value="@dept.Name">@dept.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                <!-- NEW: Spot Place Dropdown -->
                <div class="col-md-3">
                    <label class="form-label fw-bold">ช่องซักประวัติ</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
                        <select class="form-select" @bind="selectedSpotPlace">
                            <option value="">เลือกช่องซักประวัติ</option>
                            <option value="1">ช่องซักประวัติที่ 1</option>
                            <option value="2">ช่องซักประวัติที่ 2</option>
                            <option value="3">ช่องซักประวัติที่ 3</option>
                            <option value="4">ช่องซักประวัติที่ 4</option>
                            <option value="5">ช่องซักประวัติที่ 5</option>
                        </select>
                    </div>
                </div>
                
                <div class="col-md-2 d-flex align-items-end">
                    @* <button class="btn btn-outline-primary w-100" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-1"></i> Refresh
                    </button> *@
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Message -->
@* @if (!string.IsNullOrEmpty(message))
{
    <div class="alert @alertClass alert-dismissible fade show mt-3" role="alert">
        <i class="fas @(alertClass.Contains("success") ? "fa-check-circle" : alertClass.Contains("danger") ? "fa-exclamation-circle" : "fa-info-circle") me-2"></i>
        @message
        <button type="button" class="btn-close" @onclick="ClearMessage"></button>
    </div>
} *@

    <!-- Queue Content -->
    <div class="queue-content mt-4">
        <div class="row">
            <!-- History Taking Queue Section -->
            <div class="col-12 mb-4">
                <div class="section-header mb-3">
                    <h4 class="section-title"><i class="fas fa-stethoscope me-2"></i>คิวซักประวัติ</h4>
                    <div class="section-divider"></div>
                </div>
                
                <div class="row">
                    <!-- Waiting for History Taking -->
                    <div class="col-lg-6 col-md-12 mb-4">
                        <div class="card queue-card h-100">
                            <div class="card-header card-header-waiting">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="fas fa-list-alt me-2"></i> คิวรอเรียกซักประวัติ</h5>
                                    <span class="badge bg-waiting">@filteredQueuePatientHxs?.Count คิว</span>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                {
                                    <div class="department-filter-badge mt-1">
                                        <small class="text-muted"><i class="fas fa-filter me-1"></i>ห้อง: @selectedDepartment</small>
                                    </div>
                                }
                            </div>
                            <div class="card-body p-0">
                                @if (filteredQueuePatientHxs?.Count > 0)
                                {
                                    <div class="table-container">
                                        <table class="table table-hover table-queue mb-0">
                                            <thead>
                                                <tr>
                                                    <th style="width: 15%;">HN</th>
                                                    <th style="width: 30%;">ชื่อ-สกุล</th>
                                                    <th style="width: 20%;" class="text-center">คิวซักประวัติ</th>
                                                    <th style="width: 35%;" class="text-center">การดำเนินการ</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var patient in filteredQueuePatientHxs)
                                                {
                                                    <tr>
                                                        <td class="fw-bold patient-hn">@patient.Hn</td>
                                                        <td class="patient-name">
                                                            @if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
                                                            {
                                                                @patientNames[patient.Hn]
                                                            }
                                                            else if (!string.IsNullOrEmpty(patient.Hn))
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <span>HN: @patient.Hn</span>
                                                                    <span class="loading-spinner ms-2">
                                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                                        <span class="ms-1">กำลังโหลด...</span>
                                                                    </span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">ไม่มีข้อมูล HN</span>
                                                            }
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-queue-number">@patient.QueueHx</span>
                                                        </td>
                                                        <td class="text-center action-buttons">
                                                            <button class="btn btn-call me-2" @onclick="() => CallPatient1(patient, patient.QueueDep, selectedSpotPlace)" title="เรียกผู้ป่วย">
                                                                <i class="fas fa-bullhorn me-1"></i> เรียก
                                                            </button>
                                                            <button class="btn btn-arrived me-2" @onclick="() => UpdateStatusHx(patient.Id, 1, patient.Hn)" title="ผู้ป่วยมาแล้ว">
                                                                <i class="fas fa-check-circle me-1"></i> มา
                                                            </button>
                                                            <button class="btn btn-not-arrived" @onclick="() => UpdateStatusHx(patient.Id, 2, patient.Hn)" title="ผู้ป่วยไม่มา">
                                                                <i class="fas fa-times-circle me-1"></i> ไม่มา
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data-placeholder">
                                        @if (isLoading)
                                        {
                                            <div class="text-center py-5">
                                                <div class="spinner-border text-primary mb-3" role="status"></div>
                                                <p>กำลังโหลดข้อมูล...</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-5">
                                                <i class="fas fa-inbox no-data-icon"></i>
                                                <p class="text-muted mt-2">ไม่มีข้อมูลคิวผู้ป่วย</p>
                                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                                {
                                                    <small class="text-muted">สำหรับห้องตรวจ: @selectedDepartment</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Not Arrived for History Taking -->
                    <div class="col-lg-6 col-md-12 mb-4">
                        <div class="card queue-card h-100">
                            <div class="card-header card-header-not-arrived">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="fas fa-user-times me-2"></i> คิวเรียกแล้วไม่มา</h5>
                                    <span class="badge bg-not-arrived">@filteredQueuePatientHsS2s?.Count คิว</span>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                {
                                    <div class="department-filter-badge mt-1">
                                        <small class="text-muted"><i class="fas fa-filter me-1"></i>ห้อง: @selectedDepartment</small>
                                    </div>
                                }
                            </div>
                            <div class="card-body p-0">
                                @if (filteredQueuePatientHsS2s?.Count > 0)
                                {
                                    <div class="table-container">
                                        <table class="table table-hover table-queue mb-0">
                                            <thead>
                                                <tr>
                                                    <th style="width: 15%;">HN</th>
                                                    <th style="width: 30%;">ชื่อ-สกุล</th>
                                                    <th style="width: 20%;" class="text-center">คิวซักประวัติ</th>
                                                    <th style="width: 35%;" class="text-center">การดำเนินการ</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var patient in filteredQueuePatientHsS2s)
                                                {
                                                    <tr>
                                                        <td class="fw-bold patient-hn">@patient.Hn</td>
                                                        <td class="patient-name">
                                                            @if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
                                                            {
                                                                @patientNames[patient.Hn]
                                                            }
                                                            else if (!string.IsNullOrEmpty(patient.Hn))
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <span>HN: @patient.Hn</span>
                                                                    <span class="loading-spinner ms-2">
                                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                                        <span class="ms-1">กำลังโหลด...</span>
                                                                    </span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">ไม่มีข้อมูล HN</span>
                                                            }
                                                        </td>
                                                        <td class="text-center">
                                                            <span class="badge bg-queue-number">@patient.QueueHx</span>
                                                        </td>
                                                        <td class="text-center action-buttons">
                                                             <button class="btn btn-call me-2" @onclick="() => CallPatient1(patient, patient.QueueDep, selectedSpotPlace)" title="เรียกผู้ป่วย">
                                                                <i class="fas fa-bullhorn me-1"></i> เรียก
                                                            </button>
                                                            <button class="btn btn-arrived" @onclick="() => UpdateStatusHx(patient.Id, 1, patient.Hn)" title="ผู้ป่วยมาแล้ว">
                                                                <i class="fas fa-undo me-1"></i> มาแล้ว
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data-placeholder">
                                        @if (isLoading)
                                        {
                                            <div class="text-center py-5">
                                                <div class="spinner-border text-primary mb-3" role="status"></div>
                                                <p>กำลังโหลดข้อมูล...</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-5">
                                                <i class="fas fa-inbox no-data-icon"></i>
                                                <p class="text-muted mt-2">ไม่มีข้อมูลคิวผู้ป่วย</p>
                                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                                {
                                                    <small class="text-muted">สำหรับห้องตรวจ: @selectedDepartment</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Examination Queue Section -->
            <div class="col-12">
                <div class="section-header mb-3">
                    <h4 class="section-title"><i class="fas fa-clipboard-check me-2"></i>คิวตรวจรักษา</h4>
                    <div class="section-divider"></div>
                </div>
                
                <div class="row">
                    <!-- Waiting for Examination -->
                    <div class="col-lg-6 col-md-12 mb-4">
                        <div class="card queue-card h-100">
                            <div class="card-header card-header-waiting">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="fas fa-clock me-2"></i> คิวรอเรียก</h5>
                                    <span class="badge bg-waiting">@filteredQueuePatients?.Count คิว</span>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                {
                                    <div class="department-filter-badge mt-1">
                                        <small class="text-muted"><i class="fas fa-filter me-1"></i>ห้อง: @selectedDepartment</small>
                                    </div>
                                }
                            </div>
                            <div class="card-body p-0">
                                @if (filteredQueuePatients?.Count > 0)
                                {
                                    <div class="table-container">
                                        <table class="table table-hover table-queue mb-0">
                                            <thead>
                                                <tr>
                                                    <th style="width: 12%;">HN</th>
                                                    <th style="width: 28%;">ชื่อ-สกุล</th>
                                                    <th style="width: 20%;">ห้องตรวจ</th>
                                                    <th style="width: 15%;" class="text-center">คิวห้องตรวจ</th>
                                                    <th style="width: 25%;" class="text-center">การดำเนินการ</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var patient in filteredQueuePatients)
                                                {
                                                    <tr>
                                                        <td class="fw-bold patient-hn">@patient.Hn</td>
                                                        <td class="patient-name">
                                                            @if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
                                                            {
                                                                @patientNames[patient.Hn]
                                                            }
                                                            else if (!string.IsNullOrEmpty(patient.Hn))
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <span>HN: @patient.Hn</span>
                                                                    <span class="loading-spinner ms-2">
                                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                                        <span class="ms-1">กำลังโหลด...</span>
                                                                    </span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">ไม่มีข้อมูล HN</span>
                                                            }
                                                        </td>
                                                        <td>@patient.QueueNameDep</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-queue-number">@patient.QueueDep</span>
                                                        </td>
                                                        <td class="text-center action-buttons">
                                                            <button class="btn btn-call me-2" @onclick="() => CallPatient(patient, patient.QueueDep)" title="เรียกผู้ป่วย">
                                                                <i class="fas fa-bullhorn me-1"></i> เรียก
                                                            </button>
                                                            <button class="btn btn-arrived me-2" @onclick="() => UpdateStatus(patient.Id, 1, patient.Hn)" title="ผู้ป่วยมาแล้ว">
                                                                <i class="fas fa-check-circle me-1"></i> มา
                                                            </button>
                                                            <button class="btn btn-not-arrived" @onclick="() => UpdateStatus(patient.Id, 2, patient.Hn)" title="ผู้ป่วยไม่มา">
                                                                <i class="fas fa-times-circle me-1"></i> ไม่มา
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data-placeholder">
                                        @if (isLoading)
                                        {
                                            <div class="text-center py-5">
                                                <div class="spinner-border text-primary mb-3" role="status"></div>
                                                <p>กำลังโหลดข้อมูล...</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-5">
                                                <i class="fas fa-inbox no-data-icon"></i>
                                                <p class="text-muted mt-2">ไม่มีข้อมูลคิวผู้ป่วย</p>
                                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                                {
                                                    <small class="text-muted">สำหรับห้องตรวจ: @selectedDepartment</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Not Arrived for Examination -->
                    <div class="col-lg-6 col-md-12 mb-4">
                        <div class="card queue-card h-100">
                            <div class="card-header card-header-not-arrived">
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0"><i class="fas fa-user-times me-2"></i> คิวเรียกแล้วไม่มา</h5>
                                    <span class="badge bg-not-arrived">@filteredQueuePatientS2s?.Count คิว</span>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                {
                                    <div class="department-filter-badge mt-1">
                                        <small class="text-muted"><i class="fas fa-filter me-1"></i>ห้อง: @selectedDepartment</small>
                                    </div>
                                }
                            </div>
                            <div class="card-body p-0">
                                @if (filteredQueuePatientS2s?.Count > 0)
                                {
                                    <div class="table-container">
                                        <table class="table table-hover table-queue mb-0">
                                            <thead>
                                                <tr>
                                                    <th style="width: 12%;">HN</th>
                                                    <th style="width: 28%;">ชื่อ-สกุล</th>
                                                    <th style="width: 20%;">ห้องตรวจ</th>
                                                    <th style="width: 15%;" class="text-center">คิวห้องตรวจ</th>
                                                    <th style="width: 25%;" class="text-center">การดำเนินการ</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var patient in filteredQueuePatientS2s)
                                                {
                                                    <tr>
                                                        <td class="fw-bold patient-hn">@patient.Hn</td>
                                                        <td class="patient-name">
                                                            @if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
                                                            {
                                                                @patientNames[patient.Hn]
                                                            }
                                                            else if (!string.IsNullOrEmpty(patient.Hn))
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <span>HN: @patient.Hn</span>
                                                                    <span class="loading-spinner ms-2">
                                                                        <span class="spinner-border spinner-border-sm" role="status"></span>
                                                                        <span class="ms-1">กำลังโหลด...</span>
                                                                    </span>
                                                                </div>
                                                            }
                                                            else
                                                            {
                                                                <span class="text-muted">ไม่มีข้อมูล HN</span>
                                                            }
                                                        </td>
                                                        <td>@patient.QueueNameDep</td>
                                                        <td class="text-center">
                                                            <span class="badge bg-queue-number">@patient.QueueDep</span>
                                                        </td>
                                                        <td class="text-center action-buttons">
                                                            <button class="btn btn-call me-2" @onclick="() => CallPatient(patient, patient.QueueDep)" title="เรียกผู้ป่วยอีกครั้ง">
                                                                <i class="fas fa-bullhorn me-1"></i> เรียก
                                                            </button>
                                                            <button class="btn btn-arrived" @onclick="() => UpdateStatus(patient.Id, 1, patient.Hn)" title="ผู้ป่วยมาแล้ว">
                                                                <i class="fas fa-undo me-1"></i> มาแล้ว
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="no-data-placeholder">
                                        @if (isLoading)
                                        {
                                            <div class="text-center py-5">
                                                <div class="spinner-border text-primary mb-3" role="status"></div>
                                                <p>กำลังโหลดข้อมูล...</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-center py-5">
                                                <i class="fas fa-inbox no-data-icon"></i>
                                                <p class="text-muted mt-2">ไม่มีข้อมูลคิวผู้ป่วย</p>
                                                @if (!string.IsNullOrEmpty(selectedDepartment))
                                                {
                                                    <small class="text-muted">สำหรับห้องตรวจ: @selectedDepartment</small>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
@* </div> *@

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">กำลังโหลดข้อมูล...</p>
    </div>
}

@code {
   private HubConnection? hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "กำลังเชื่อมต่อ...";
    
    private string userName = string.Empty;
    private string selectedDepartment = string.Empty;
    
    // Add this variable to your code section
    private string selectedSpotPlace = "";
    private List<QueuePatient> filteredQueuePatients = new();
    private List<QueuePatient> filteredQueuePatientS2s = new();
    private List<QueuePatient> filteredQueuePatientHxs = new();
    private List<QueuePatient> filteredQueuePatientHsS2s = new();
    private List<QueueDepartment> availableDepartments = new();
    private string message = string.Empty;
    private string alertClass = "alert-info";
    private bool isLoading = false;
    private string searchHn = string.Empty;
    private string previousDepartment = string.Empty;
    private PatientInfo? patientInfo = null;
    private Dictionary<string, string> patientNames = new();
    private CancellationTokenSource _cancellationTokenSource = new();
    
     private int totalQueueCount = 0;
    
    private int QueueCount => totalQueueCount;

    @* private int QueueCount => QueueService.Count(); *@
 private async Task LoadTotalQueueCount()
{
    try
    {
        var client = _httpClientFactory.CreateClient("QueueApi");
        
        // ถ้า API ส่งกลับมาเป็น List<QueuePatient> จริงๆ
        var queuePatients = await client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueAllToDay");
        
        if (queuePatients != null)
        {
            totalQueueCount = queuePatients.Count;
            Console.WriteLine($"Total queue count loaded: {totalQueueCount}");
        }
        else
        {
            Console.WriteLine("API returned null");
            totalQueueCount = 0;
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading total queue count: {ex.Message}");
        totalQueueCount = 0;
    }
}
     // เพิ่มเมธอดทดสอบ API
    private async Task TestQueueApi()
    {
        try
        {
            var client = _httpClientFactory.CreateClient("QueueApi");
            
            // ทดสอบเรียก API โดยตรงใช้ GetFromJsonAsync
            var queuePatients = await client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueAllToDay");
            
            if (queuePatients != null)
            {
                Console.WriteLine($"API returned {queuePatients.Count} patients");
                Console.WriteLine($"First patient HN: {queuePatients.FirstOrDefault()?.Hn ?? "N/A"}");
            }
            else
            {
                Console.WriteLine("API returned null");
            }
            
            // ทดสอบ API อื่นๆ เพื่อตรวจสอบการเชื่อมต่อ
            var testPatients = await client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueNull");
            if (testPatients != null)
            {
                Console.WriteLine($"Test API returned {testPatients.Count} patients");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"API Test Error: {ex.Message}");
        }
    }

     protected override async Task OnInitializedAsync()
    {
        await LoadAvailableDepartments();
        await TestQueueApi();
        await LoadData();
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        try
        {
            // ใช้ URL แบบเต็มและถูกต้อง
            var hubUrl = "http://localhost:5041/queuehub"; // เปลี่ยนเป็นพอร์ต 5041
            Console.WriteLine($"Connecting to SignalR hub at: {hubUrl}");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl, options =>
                {
                    // ตั้งค่าเพิ่มเติมหากจำเป็น
                })
                .WithAutomaticReconnect(new[] {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                })
                .Build();

            // ตั้งค่า event handlers
            hubConnection.Reconnecting += error =>
            {
                isConnected = false;
                connectionStatus = "กำลังเชื่อมต่อใหม่...";
                Console.WriteLine($"SignalR reconnecting: {error?.Message}");
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += connectionId =>
            {
                isConnected = true;
                connectionStatus = "เชื่อมต่อเรียบร้อย";
                Console.WriteLine($"SignalR reconnected: {connectionId}");
                return Task.CompletedTask;
            };

            hubConnection.Closed += async error =>
            {
                isConnected = false;
                connectionStatus = "เชื่อมต่อขาด";
                Console.WriteLine($"SignalR connection closed: {error?.Message}");
                
                // พยายาม reconnect หลังจาก delay
                await Task.Delay(5000);
                if (!_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    await InitializeSignalR();
                }
            };

            // กำหนดการรับข้อมูลจาก Server - ใช้ชื่อ method ที่ตรงกับ Server
            hubConnection.On<object>("NewQueueAdded", async (queueData) =>
            {
                Console.WriteLine("New queue added via SignalR");
                await InvokeAsync(async () =>
                {
                    message = "มีคิวใหม่เพิ่มเข้ามาในระบบ";
                    alertClass = "alert-info";
                    await RefreshData();
                    StateHasChanged();
                });
            });

            hubConnection.On<object>("QueueStatusUpdated", async (queueData) =>
            {
                Console.WriteLine("Queue status updated via SignalR");
                await InvokeAsync(async () =>
                {
                    message = "อัปเดตสถานะคิวเรียบร้อย";
                    alertClass = "alert-info";
                    await RefreshData();
                    StateHasChanged();
                });
            });

            hubConnection.On<object>("QueueStatusHxUpdated", async (queueData) =>
            {
                Console.WriteLine("Queue history status updated via SignalR");
                await InvokeAsync(async () =>
                {
                    message = "อัปเดตสถานะประวัติคิวเรียบร้อย";
                    alertClass = "alert-info";
                    await RefreshData();
                    StateHasChanged();
                });
            });

            // เริ่มการเชื่อมต่อ
            await hubConnection.StartAsync(_cancellationTokenSource.Token);
            isConnected = true;
            connectionStatus = "เชื่อมต่อเรียบร้อย";
            Console.WriteLine("SignalR connected successfully");
            
            // Join group ทั่วไป
            await hubConnection.InvokeAsync("JoinAllQueuesGroup");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
            isConnected = false;
            connectionStatus = "เชื่อมต่อล้มเหลว";
        }
    }


      private async Task MonitorConnection()
    {
        while (!_cancellationTokenSource.Token.IsCancellationRequested)
        {
            await Task.Delay(10000); // ตรวจสอบทุก 10 วินาที
            
            if (hubConnection == null || hubConnection.State == HubConnectionState.Disconnected)
            {
                Console.WriteLine("Connection lost, attempting to reconnect...");
                await InitializeSignalR();
            }
            else if (hubConnection.State == HubConnectionState.Connected && !isConnected)
            {
                isConnected = true;
                connectionStatus = "เชื่อมต่อเรียบร้อย";
                await InvokeAsync(StateHasChanged);
            }
        }
    }

     private string GetConnectionStatusText()
    {
        return connectionStatus;
    }

    private string GetConnectionStatusClass()
    {
        return isConnected ? "connection-status connected" : "connection-status disconnected";
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();
        
        if (hubConnection != null)
        {
            try
            {
                // ออกจากกลุ่มทั้งหมดก่อน disconnect
                if (!string.IsNullOrEmpty(selectedDepartment) && isConnected)
                {
                    await hubConnection.InvokeAsync("LeaveDepartmentGroup", selectedDepartment);
                }
                
                if (isConnected)
                {
                    await hubConnection.InvokeAsync("LeaveAllQueuesGroup");
                }
                
                await hubConnection.StopAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during dispose: {ex.Message}");
            }
            finally
            {
                await hubConnection.DisposeAsync();
            }
        }
        
        _cancellationTokenSource.Dispose();
    }

    private async Task OnDepartmentChanged(ChangeEventArgs e)
    {
        var newDepartment = e.Value?.ToString() ?? "";
        var oldDepartment = selectedDepartment;
        selectedDepartment = newDepartment;
        
        try
        {
            // ออกจากกลุ่มเดิม (ถ้ามีและเชื่อมต่ออยู่)
            if (!string.IsNullOrEmpty(oldDepartment) && hubConnection != null && isConnected)
            {
                await hubConnection.InvokeAsync("LeaveDepartmentGroup", oldDepartment);
                Console.WriteLine($"Left department group: {oldDepartment}");
            }
            
            // เข้าร่วมกลุ่มใหม่ (ถ้ามีและเชื่อมต่ออยู่)
            if (!string.IsNullOrEmpty(selectedDepartment) && hubConnection != null && isConnected)
            {
                await hubConnection.InvokeAsync("JoinDepartmentGroup", selectedDepartment);
                Console.WriteLine($"Joined department group: {selectedDepartment}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing department group: {ex.Message}");
        }
        
        Console.WriteLine($"เลือกห้องตรวจ: {selectedDepartment}");
        await ApplyDepartmentFilter();
        await InvokeAsync(StateHasChanged);
    }

    private void ClearMessage()
    {
        message = string.Empty;
    }

   @* private async Task LoadAvailableDepartments()
    {
        try
        {
            Console.WriteLine("กำลังโหลดรายการห้องตรวจ...");
            
            var client = _httpClientFactory.CreateClient("QueueApi");
            client.Timeout = TimeSpan.FromSeconds(30);
            
            var response = await client.GetAsync("api/DepartmentName");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var departments = JsonConvert.DeserializeObject<List<QueueDepartment>>(json);
                
                if (departments != null && departments.Count > 0)
                {
                    availableDepartments = departments.OrderBy(d => d.Name).ToList();
                    Console.WriteLine($"โหลดห้องตรวจได้ {availableDepartments.Count} รายการ");
                }
                else
                {
                    Console.WriteLine("ไม่พบข้อมูลห้องตรวจ");
                    LoadFallbackDepartments();
                }
            }
            else
            {
                Console.WriteLine($"HTTP error: {response.StatusCode}");
                LoadFallbackDepartments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
            LoadFallbackDepartments();
        }
    } *@

    // ✅ เพิ่ม method ที่หายไป
    @* private void LoadFallbackDepartments()
    {
        availableDepartments = new List<QueueDepartment>
        {
            new QueueDepartment { Id = 1, Name = "ห้องตรวจทั่วไป" },
            new QueueDepartment { Id = 2, Name = "ห้องตรวจศัลยกรรม" },
            new QueueDepartment { Id = 3, Name = "ห้องตรวจกระดูก" },
            new QueueDepartment { Id = 4, Name = "ห้องตรวจผิวหนัง" }
        };
        Console.WriteLine("ใช้ข้อมูลห้องตรวจสำรอง");
    }

    private async Task LoadAvailableDepartments()
    {
        try
        {
            Console.WriteLine("กำลังโหลดรายการห้องตรวจ...");
            
            var client = _httpClientFactory.CreateClient("QueueApi");
            var response = await client.GetAsync("api/DepartmentName");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var departments = JsonSerializer.Deserialize<List<QueueDepartment>>(json);
                
                if (departments != null && departments.Count > 0)
                {
                    availableDepartments = departments.OrderBy(d => d.Name).ToList();
                    Console.WriteLine($"โหลดห้องตรวจได้ {availableDepartments.Count} รายการ");
                }
                else
                {
                    LoadFallbackDepartments();
                }
            }
            else
            {
                LoadFallbackDepartments();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
            LoadFallbackDepartments();
        }
    } *@
    
    private async Task LoadAvailableDepartments()
    {
        try
        {
            Console.WriteLine("กำลังโหลดรายการห้องตรวจ...");
            
            var client = _httpClientFactory.CreateClient("QueueApi");
            var departments = await client.GetFromJsonAsync<List<QueueDepartment>>("api/DepartmentName");
            
            if (departments != null && departments.Count > 0)
            {
                availableDepartments = departments.OrderBy(d => d.Name).ToList();
                Console.WriteLine($"โหลดห้องตรวจได้ {availableDepartments.Count} รายการ");
                message = "โหลดรายการห้องตรวจสำเร็จ";
                alertClass = "alert-success";
            }
            else
            {
                message = "ไม่พบข้อมูลห้องตรวจ";
                alertClass = "alert-warning";
                Console.WriteLine("ไม่พบข้อมูลห้องตรวจ");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
            message = $"ไม่สามารถโหลดรายการห้องตรวจ: {ex.Message}";
            alertClass = "alert-danger";
        }
        finally
        {
            StateHasChanged();
        }
    }

   private async Task ApplyDepartmentFilter()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var client = _httpClientFactory.CreateClient("QueueApi");

            if (string.IsNullOrEmpty(selectedDepartment))
            {
                // แสดงทั้งหมด
                var tasks = new Task[]
                {
                    client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueNull")
                        .ContinueWith(t => filteredQueuePatients = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueS2")
                        .ContinueWith(t => filteredQueuePatientS2s = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueHxNull")
                        .ContinueWith(t => filteredQueuePatientHxs = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>("api/Queue/GetQueueHxS2")
                        .ContinueWith(t => filteredQueuePatientHsS2s = t.Result ?? new List<QueuePatient>())
                };

                await Task.WhenAll(tasks);
            }
            else
            {
                // ใช้ API กรองตามห้องตรวจที่เลือก
                var tasks = new Task[]
                {
                    client.GetFromJsonAsync<List<QueuePatient>>($"api/Queue/GetQueueDepartmentbyNameS1/{selectedDepartment}")
                        .ContinueWith(t => filteredQueuePatients = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>($"api/Queue/GetQueueDepartmentbyNameS2/{selectedDepartment}")
                        .ContinueWith(t => filteredQueuePatientS2s = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>($"api/Queue/GetQueueDepartmentbyNameHxS1/{selectedDepartment}")
                        .ContinueWith(t => filteredQueuePatientHxs = t.Result ?? new List<QueuePatient>()),
                    client.GetFromJsonAsync<List<QueuePatient>>($"api/Queue/GetQueueDepartmentbyNameHxS2/{selectedDepartment}")
                        .ContinueWith(t => filteredQueuePatientHsS2s = t.Result ?? new List<QueuePatient>())
                };

                await Task.WhenAll(tasks);
            }
            
            Console.WriteLine($"กรองข้อมูล: {selectedDepartment}, คิวรอเรียก: {filteredQueuePatients?.Count}, คิวไม่มา: {filteredQueuePatientS2s?.Count}");
            
            // โหลดชื่อผู้ป่วยหลังจากกรองข้อมูล
            await LoadPatientNames();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying department filter: {ex.Message}");
            message = $"เกิดข้อผิดพลาดในการกรองข้อมูล: {ex.Message}";
            alertClass = "alert-danger";
            
            // ตั้งค่า default values เพื่อป้องกัน null reference
            filteredQueuePatients = new List<QueuePatient>();
            filteredQueuePatientS2s = new List<QueuePatient>();
            filteredQueuePatientHxs = new List<QueuePatient>();
            filteredQueuePatientHsS2s = new List<QueuePatient>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

   private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // ล้างข้อมูลเก่าก่อนโหลดใหม่
            patientNames.Clear();
            
            var client = _httpClientFactory.CreateClient("QueueApi");
            
            @* // โหลดจำนวนคิวทั้งหมด
            await LoadTotalQueueCount();
            
            // ใช้การกรองข้อมูลแทน
            await ApplyDepartmentFilter(); *@
            // โหลดจำนวนคิวทั้งหมด - ใช้ Task.WhenAll เพื่อโหลดพร้อมกัน
            var loadTotalCountTask = LoadTotalQueueCount();
            var applyFilterTask = ApplyDepartmentFilter();
            
            await Task.WhenAll(loadTotalCountTask, applyFilterTask);
        }
        catch (Exception ex)
        {
            message = $"เกิดข้อผิดพลาดในการโหลดข้อมูล: {ex.Message}";
            alertClass = "alert-danger";
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

   private async Task LoadPatientNames()
    {
        try
        {
            var allHns = new List<string>();
            
            if (filteredQueuePatients != null)
                allHns.AddRange(filteredQueuePatients.Select(p => p.Hn).Where(hn => !string.IsNullOrEmpty(hn))!);
            
            if (filteredQueuePatientHxs != null)
                allHns.AddRange(filteredQueuePatientHxs.Select(p => p.Hn).Where(hn => !string.IsNullOrEmpty(hn))!);
            
            if (filteredQueuePatientS2s != null)
                allHns.AddRange(filteredQueuePatientS2s.Select(p => p.Hn).Where(hn => !string.IsNullOrEmpty(hn))!);
            
            if (filteredQueuePatientHsS2s != null)
                allHns.AddRange(filteredQueuePatientHsS2s.Select(p => p.Hn).Where(hn => !string.IsNullOrEmpty(hn))!);

            var uniqueHns = allHns.Distinct().Where(hn => !patientNames.ContainsKey(hn)).ToList();

            foreach (var hn in uniqueHns)
            {
                if (string.IsNullOrEmpty(hn)) continue;

                try
                {
                    var client = _httpClientFactory.CreateClient("BackEnd");
                    client.Timeout = TimeSpan.FromSeconds(10);
                    
                    var patient = await client.GetFromJsonAsync<PatientInfo>($"api/IpdVs/GetPatientByHn?hn={hn}");
                    
                    if (patient != null)
                    {
                        patientNames[hn] = $"{patient.Pname}{patient.Fname} {patient.Lname}";
                    }
                    else
                    {
                        patientNames[hn] = $"HN: {hn}";
                    }
                }
                catch
                {
                    patientNames[hn] = $"HN: {hn}";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading patient names: {ex.Message}");
        }
    }

    // เพิ่ม method สำหรับยกเลิกการโหลด
    private void CancelLoading()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource = new CancellationTokenSource();
    }

    private async Task RefreshData()
    {
        CancelLoading();
        patientNames.Clear();
        await LoadData();
    }

    private async Task UpdateStatus(int patientId, int status, string hn)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var client = _httpClientFactory.CreateClient("QueueApi");
            var updateDto = new QueueStatusUpdateDto { Status = status };
            
            var response = await client.PutAsJsonAsync($"api/Queue/AddQueueStatus/{patientId}", updateDto);

            if (response.IsSuccessStatusCode)
            {
                message = $"อัพเดทสถานะผู้ป่วย HN: {hn} สำเร็จ";
                alertClass = "alert-success";
                
                // แจ้งเตือนผ่าน SignalR - ใช้ method name ที่ถูกต้อง
                if (isConnected && hubConnection != null)
                {
                    try
                    {
                        await hubConnection.SendAsync("SendQueueUpdate", 
                            $"อัปเดตสถานะคิว HN: {hn} เป็น {GetStatusText(status)}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"SignalR send error: {ex.Message}");
                    }
                }
                
                await Task.Delay(500);
                await RefreshData();
            }
            else
            {
                message = $"เกิดข้อผิดพลาด: {response.StatusCode}";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"เกิดข้อผิดพลาด: {ex.Message}";
            alertClass = "alert-danger";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateStatusHx(int patientId, int status, string hn)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var client = _httpClientFactory.CreateClient("QueueApi");
            var updateDto = new QueueStatusHxUpdateDto { StatusHx = status };
            
            var response = await client.PutAsJsonAsync($"api/Queue/AddQueueStatusHx/{patientId}", updateDto);

            if (response.IsSuccessStatusCode)
            {
                message = $"อัพเดทสถานะผู้ป่วย HN: {hn} สำเร็จ";
                alertClass = "alert-success";
                
                // แจ้งเตือนผ่าน SignalR
                if (isConnected && hubConnection != null)
                {
                    try
                    {
                        await hubConnection.SendAsync("NotifyQueueStatusHxUpdate", 
                            new { 
                                Id = patientId, 
                                Hn = hn, 
                                StatusHx = status,
                                UpdatedAt = DateTime.Now 
                            });
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"SignalR send error: {ex.Message}");
                    }
                }
                
                await Task.Delay(500);
                await RefreshData();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"เกิดข้อผิดพลาด: {response.StatusCode} - {errorContent}";
                alertClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"เกิดข้อผิดพลาด: {ex.Message}";
            alertClass = "alert-danger";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusText(int status)
    {
        return status switch
        {
            1 => "มาแล้ว",
            2 => "ไม่มา",
            _ => "รอเรียก"
        };
    }
    
    

    private async Task CallPatient(QueuePatient patient, int? queueNumber = null)
    {
        if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
        {
            userName = patientNames[patient.Hn];
            var departmentCode = patient.QueueNameDep?.Split('-')[0] ?? "";
            var actualQueueNumber = patient.QueueDep ?? 0;
            
            // แจ้งเตือนผ่าน SignalR ว่ามีการเรียกคิว
            if (isConnected && hubConnection != null)
            {
                try
                {
                    await hubConnection.SendAsync("NotifyQueueCall", 
                        new {
                            QueueNumber = actualQueueNumber,
                            PatientName = userName,
                            Department = departmentCode,
                            CallType = " examination",
                            CalledAt = DateTime.Now
                        });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"SignalR send error: {ex.Message}");
                }
            }
            
            await AnnounceQueue1(actualQueueNumber, userName, departmentCode, 0.7, 1.2, 2.0);
        }
        else
        {
            searchHn = patient.Hn;
            await SearchPatientByHn();
            if (patientInfo != null)
            {
                var departmentCode = patient.QueueNameDep?.Split('-')[0] ?? "";
                var actualQueueNumber = patient.QueueDep ?? 0;
                
                // แจ้งเตือนผ่าน SignalR ว่ามีการเรียกคิว
                if (isConnected && hubConnection != null)
                {
                    await hubConnection.SendAsync("SendQueueUpdate", 
                        $"เรียกคิว {actualQueueNumber} ผู้ป่วย: {userName} ที่ห้อง {departmentCode}");
                }
                
                await AnnounceQueue1(actualQueueNumber, userName, departmentCode, 0.7, 1.2, 2.0);
            }
        }
    }
    
    private async Task CallPatient1(QueuePatient patient, int? queueNumber = null, string spotPlace = "")
    {
        if (patient.Hn != null && patientNames.ContainsKey(patient.Hn))
        {
            userName = patientNames[patient.Hn];
            var departmentCode = patient.QueueName?.Split('-')[0] ?? "";
            var actualQueueNumber = patient.QueueHx ?? 0;
            
            // แจ้งเตือนผ่าน SignalR ว่ามีการเรียกคิว
            @* if (isConnected && hubConnection != null)
            {
                await hubConnection.SendAsync("SendQueueUpdate", 
                    $"เรียกคิวซักประวัติ {actualQueueNumber} ผู้ป่วย: {userName} ที่ห้อง {departmentCode} ช่อง {spotPlace}");
            } *@
             // แจ้งเตือนผ่าน SignalR
            if (isConnected && hubConnection != null)
            {
                try
                {
                    // ส่งข้อมูลไปยังหน้าจอแสดงผล
                    await hubConnection.SendAsync("SendToDisplayGroup", 
                        actualQueueNumber.ToString(), 
                        userName, 
                        departmentCode, 
                        spotPlace,
                        "history");
                    
                    Console.WriteLine($"Sent to display: {actualQueueNumber}, {userName}, {departmentCode}, {spotPlace}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"SignalR send error: {ex.Message}");
                }
            }
                
            await AnnounceQueue2(actualQueueNumber, userName, departmentCode, spotPlace, 0.7, 1.2, 2.0);
        }
        else
        {
            searchHn = patient.Hn;
            await SearchPatientByHn();
            if (patientInfo != null)
            {
                var departmentCode = patient.QueueNameDep?.Split('-')[0] ?? "";
                var actualQueueNumber = patient.QueueHx ?? 0;
                
                // แจ้งเตือนผ่าน SignalR ว่ามีการเรียกคิว
                if (isConnected && hubConnection != null)
                {
                    await hubConnection.SendAsync("SendQueueUpdate", 
                        $"เรียกคิวซักประวัติ {actualQueueNumber} ผู้ป่วย: {userName} ที่ห้อง {departmentCode} ช่อง {spotPlace}");
                }
                
                await AnnounceQueue2(actualQueueNumber, userName, departmentCode, spotPlace, 0.7, 1.2, 2.0);
            }
        }
    }

    private async Task SearchPatientByHn()
    {
        if (string.IsNullOrWhiteSpace(searchHn))
        {
            message = "กรุณากรอก HN เพื่อค้นหา";
            alertClass = "alert-warning";
            StateHasChanged();
            return;
        }

        try
        {
            isLoading = true;
            StateHasChanged();

            var client = _httpClientFactory.CreateClient("BackEnd");
            patientInfo = await client.GetFromJsonAsync<PatientInfo>($"api/IpdVs/GetPatientByHn?hn={searchHn}");

            if (patientInfo != null)
            {
                userName = $"{patientInfo.Pname}{patientInfo.Fname} {patientInfo.Lname}";
                message = $"พบข้อมูลผู้ป่วย: {userName}";
                alertClass = "alert-success";
                
                if (!patientNames.ContainsKey(searchHn))
                {
                    patientNames[searchHn] = userName;
                }
            }
            else
            {
                message = "ไม่พบข้อมูลผู้ป่วยด้วย HN นี้";
                alertClass = "alert-warning";
                userName = $"ผู้ป่วย HN: {searchHn}";
            }
        }
        catch (Exception ex)
        {
            message = $"เกิดข้อผิดพลาดในการค้นหา: {ex.Message}";
            alertClass = "alert-danger";
            userName = $"ผู้ป่วย HN: {searchHn}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AnnounceQueue1(int queueNumber, string name, string channel, double rate = 0.7, double pitch = 1.5, double volume = 0.9)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioHelper.announceQueue1", 
                queueNumber, name, channel, rate, pitch, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error announcing queue: {ex.Message}");
        }
    }
    
    private async Task AnnounceQueue2(int queueNumber, string name, string channel,  string spotPlace, double rate = 0.7, double pitch = 1.5, double volume = 0.9)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioHelper.announceQueue2", 
                queueNumber, name, channel, spotPlace, rate, pitch, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error announcing queue: {ex.Message}");
        }
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (previousDepartment != selectedDepartment)
        {
            previousDepartment = selectedDepartment;
            Console.WriteLine($"เลือกห้องตรวจ: {selectedDepartment}");
            await ApplyDepartmentFilter();
            await LoadPatientNames();
            StateHasChanged();
        }
    }
}