@page "/queuedisplay"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>üì∫ ‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß</h3>

@if (currentQueue is not null)
{
    <div class="alert alert-info">
        <h2>üì¢ ‡∏Ñ‡∏¥‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: @currentQueue.QueueName</h2>
        <p><b>HN:</b> @currentQueue.Hn</p>
        <p><b>‡πÅ‡∏ú‡∏ô‡∏Å:</b> @currentQueue.Department</p>
        <p><b>‡πÄ‡∏ß‡∏•‡∏≤:</b> @currentQueue.CalledAt</p>
    </div>
}
else
{
    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å</p>
}

<ul>
    @foreach (var log in logs)
    {
        <li>@log</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private QueueEvent? currentQueue;
    private List<string> logs = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/queuehub"))
            .WithAutomaticReconnect()
            .Build();

        // ‡∏ü‡∏±‡∏á Event CallQueue
        hubConnection.On<QueueEvent>("QueueCalled", (data) =>
        {
            currentQueue = data;
            logs.Add($"üì¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏¥‡∏ß {data.QueueName} HN:{data.Hn}");
            InvokeAsync(StateHasChanged);
        });

        // ‡∏ü‡∏±‡∏á Event SkipQueue
        hubConnection.On<object>("QueueSkipped", (data) =>
        {
            logs.Add($"‚è≠ ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏¥‡∏ß: {System.Text.Json.JsonSerializer.Serialize(data)}");
            InvokeAsync(StateHasChanged);
        });

        // ‡∏ü‡∏±‡∏á Event FinishQueue
        hubConnection.On<object>("QueueFinished", (data) =>
        {
            logs.Add($"‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Ñ‡∏¥‡∏ß: {System.Text.Json.JsonSerializer.Serialize(data)}");
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public class QueueEvent
    {
        public string Hn { get; set; } = "";
        public string QueueName { get; set; } = "";
        public string Department { get; set; } = "";
        public DateTime CalledAt { get; set; }
    }
}
