@page "/aaaa"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading
@using SoundAnnoucementApp.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@layout QueueLayout

@* <div class="display-container"> *@
    <div class="queue-display-section">
        <div class="header-container">
            <div class="header-content">
                <div class="title-section">
                    <div class="hospital-icon">
                        <i class="fas fa-hospital-alt"></i>
                    </div>
                    <div>
                        <h1>จอแสดงคิวเข้าห้องตรวจ</h1>
                        <p>@currentTime</p>
                    </div>
                </div>
                <div class="status-section">
                    <div class="connection-status @(isConnected ? "connected" : "disconnected")">
                        <div class="status-indicator"></div>
                        <span>@connectionStatus</span>
                        @if (!isConnected)
                        {
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="ReconnectSignalR" title="เชื่อมต่อใหม่">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Queue Display Section -->
        <div class="spots-grid">
            @if (isLoading)
            {
                <div class="loading-message">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>กำลังโหลดข้อมูลแผนก...</p>
                </div>
            }
            else if (hasLoadError)
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>ไม่สามารถโหลดข้อมูลแผนกได้</p>
                    <button class="retry-btn" @onclick="RetryLoadDepartments">
                        <i class="fas fa-redo"></i>
                        โหลดใหม่
                    </button>
                </div>
            }
            else if (departments != null && departments.Any())
            {
                @foreach (var department in departments)
                {
                    var spotKey = department.Id.ToString();
                    var spotInfo = spotQueues.ContainsKey(spotKey) ? spotQueues[spotKey] : null;
                    
                    <div class="spot-card @(spotInfo != null ? "active" : "inactive")">
                        <div class="spot-header">
                            <div class="spot-number">
                                <i class="fas fa-user-md"></i>
                                <span>@department.Name</span>
                            </div>
                            <div class="status-indicator"></div>
                        </div>
                        
                        <div class="spot-body">
                            @if (spotInfo != null)
                            {
                                <div class="queue-number-display">
                                    <span class="queue-number">@spotInfo.QueueNumber</span>
                                </div>
                                <div class="patient-info">
                                    <div class="patient-name">
                                        <i class="fas fa-user"></i>
                                        <span>@spotInfo.PatientName</span>
                                    </div>
                                    <div class="department">
                                        <i class="fas fa-stethoscope"></i>
                                        <span>@spotInfo.Department</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="no-queue">
                                    <i class="fas fa-user-clock"></i>
                                    <p>ไม่มีคิวในขณะนี้</p>
                                </div>
                            }
                        </div>
                        
                        <div class="spot-footer">
                            <div class="waiting-text">
                                @if (spotInfo != null)
                                {
                                    <span>กำลังซักประวัติ</span>
                                }
                                else
                                {
                                    <span>พร้อมให้บริการ</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-data-message">
                    <i class="fas fa-database"></i>
                    <p>ไม่มีข้อมูลแผนก</p>
                </div>
            }
        </div>
    </div>
@* </div> *@

@code {
    private HubConnection hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "กำลังเชื่อมต่อ...";
    private string currentTime = DateTime.Now.ToString("HH:mm:ss");
    private Dictionary<string, SpotQueueInfo> spotQueues = new Dictionary<string, SpotQueueInfo>();
    private Timer timer;
    private List<QueueDepartment> departments = new List<QueueDepartment>();
    private bool isLoading = true;
    private bool hasLoadError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // โหลด departments ก่อน
            await LoadDepartments();
            
            // จากนั้นค่อย initialize SignalR
            await InitializeSignalR();
            
            // Initialize timer to update current time every second
            timer = new Timer(new TimerCallback(_ =>
            {
                currentTime = DateTime.Now.ToString("HH:mm:ss");
                InvokeAsync(StateHasChanged);
            }), null, 0, 1000);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            isLoading = true;
            hasLoadError = false;
            StateHasChanged();
            
            // เรียก API เพื่อดึงข้อมูลแผนก
            var response = await Http.GetAsync("http://localhost:5041/api/DepartmentName/DepartmentsNoHx");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<List<QueueDepartment>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.Any())
                {
                    departments = result;
                }
                else
                {
                    hasLoadError = true;
                    Console.WriteLine("API returned empty department list");
                }
            }
            else
            {
                hasLoadError = true;
                Console.WriteLine($"Failed to load departments: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            hasLoadError = true;
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

private async Task InitializeSignalR()
{
    try
    {
        connectionStatus = "กำลังเชื่อมต่อ...";
        isConnected = false;
        StateHasChanged();
        
        // ลบการเชื่อมต่อเดิมหากมี
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }

        // ใช้ URL แบบเต็มและถูกต้อง
        var hubUrl = "http://localhost:5041/queuehub";
        Console.WriteLine($"Connecting to SignalR hub at: {hubUrl}");
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .WithAutomaticReconnect(new[] {
                TimeSpan.Zero,
                TimeSpan.FromSeconds(2),
                TimeSpan.FromSeconds(5),
                TimeSpan.FromSeconds(10)
            })
            .Build();

        // กำหนด event handlers ก่อนเริ่มการเชื่อมต่อ
        hubConnection.Reconnecting += (exception) =>
        {
            connectionStatus = "กำลังเชื่อมต่อใหม่...";
            isConnected = false;
            Console.WriteLine($"SignalR reconnecting: {exception?.Message}");
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Reconnected += (connectionId) =>
        {
            connectionStatus = "เชื่อมต่อแล้ว";
            isConnected = true;
            Console.WriteLine($"SignalR reconnected: {connectionId}");
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        hubConnection.Closed += (exception) =>
        {
            connectionStatus = "การเชื่อมต่อถูกปิด";
            isConnected = false;
            Console.WriteLine($"SignalR closed: {exception?.Message}");
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        // กำหนด method ที่จะรับข้อมูล
        hubConnection.On<string, int, string, string>("ReceiveQueueUpdate1", 
            (spotPlace, queueNumber, patientName, department) =>
        {
            Console.WriteLine($"Received update - Spot: {spotPlace}, Queue: {queueNumber}, Patient: {patientName}, Dept: {department}");
            
            // ตรวจสอบว่า spotPlace ตรงกับ department.Id ใดในรายการ
            var targetDepartment = departments?.FirstOrDefault(d => d.Id.ToString() == spotPlace);
            
            if (targetDepartment != null)
            {
                var spotInfo = new SpotQueueInfo
                {
                    SpotPlace = spotPlace,
                    QueueNumber = queueNumber,
                    PatientName = patientName,
                    Department = department
                };

                spotQueues[spotPlace] = spotInfo;
                
                // Announce the queue update with sound
                _ = AnnounceQueue3(queueNumber, patientName, department, spotPlace, 0.7, 1.2, 2.0);
                
                InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.WriteLine($"Received update for unknown spot: {spotPlace}");
                // ยังแสดงข้อมูลแม้จะไม่ตรงกับ department ก็ตาม
                var spotInfo = new SpotQueueInfo
                {
                    SpotPlace = spotPlace,
                    QueueNumber = queueNumber,
                    PatientName = patientName,
                    Department = department
                };

                spotQueues[spotPlace] = spotInfo;
                InvokeAsync(StateHasChanged);
            }
        });

        // เริ่มการเชื่อมต่อ
        await hubConnection.StartAsync();
        
        connectionStatus = "เชื่อมต่อแล้ว";
        isConnected = true;
        Console.WriteLine("SignalR connection established");

        // ขอข้อมูลล่าสุดทั้งหมดจาก server หลังจากเชื่อมต่อสำเร็จ
        try
        {
            await hubConnection.InvokeAsync("RequestAllQueueData");
            Console.WriteLine("Requested all queue data from server");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error requesting all queue data: {ex.Message}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"SignalR connection error: {ex.Message}");
        isConnected = false;
        connectionStatus = "เชื่อมต่อล้มเหลว";
    }
    
    // อัพเดท UI
    await InvokeAsync(StateHasChanged);
}

    private async Task ReconnectSignalR()
    {
        await InitializeSignalR();
    }

    private async Task RetryLoadDepartments()
    {
        await LoadDepartments();
    }

    private async Task AnnounceQueue3(int queueNumber, string patientName, string department,  string spotPlace, double rate = 0.7, double pitch = 1.5, double volume = 0.9)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioHelper.announceQueue3", 
                queueNumber, patientName, department, spotPlace, rate, pitch, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error announcing queue: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
        }
        
        timer?.Dispose();
        timer = null;
        
        Console.WriteLine("Component disposed");
    }

    public class SpotQueueInfo
    {
        public string SpotPlace { get; set; }
        public int QueueNumber { get; set; }
        public string PatientName { get; set; }
        public string Department { get; set; }
    }

    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}