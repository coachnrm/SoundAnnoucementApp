@* @page "/queuedisplay"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>üì∫ ‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß</h3>


@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...";

    private async Task InitializeSignalR()
    {
        try
        {
            // ‡πÉ‡∏ä‡πâ URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            var hubUrl = "http://localhost:5041/queuehub"; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 5041
            Console.WriteLine($"Connecting to SignalR hub at: {hubUrl}");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl, options =>
                {
                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                })
                .WithAutomaticReconnect(new[] {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                })
                .Build();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
            isConnected = false;
            connectionStatus = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
        }
        
    }
} *@

@page "/queuedisplay"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="display-container">
    <div class="header">
        <h1>üì∫ ‡∏à‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß‡∏ã‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥</h1>
        <div class="connection-status @(isConnected ? "connected" : "disconnected")">
            <i class="fas @(isConnected ? "fa-check-circle" : "fa-times-circle") me-1"></i>
            @connectionStatus
        </div>
    </div>

    @if (!isConnected)
    {
        <div class="reconnect-section">
            <button class="btn btn-primary" @onclick="InitializeSignalR">
                <i class="fas fa-sync-alt me-1"></i> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
            </button>
        </div>
    }

    <div class="spots-container mt-4">
        <div class="row">
            @for (int i = 1; i <= 5; i++)
            {
                var spotKey = i.ToString();
                var spotInfo = spotQueues.ContainsKey(spotKey) ? spotQueues[spotKey] : null;
                
                <div class="col-md-4 col-sm-6 mb-4">
                    <div class="spot-card card h-100">
                        <div class="card-header text-center">
                            <h5 class="mb-0">‡∏ä‡πà‡∏≠‡∏á‡∏ã‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà @i</h5>
                        </div>
                        <div class="card-body text-center">
                            @if (spotInfo != null)
                            {
                                <div class="queue-number-display">
                                    <span class="queue-number">@spotInfo.QueueNumber</span>
                                </div>
                                <div class="patient-info">
                                    <div class="patient-name">@spotInfo.PatientName</div>
                                    <div class="department">@spotInfo.Department</div>
                                </div>
                            }
                            else
                            {
                                <div class="no-queue">
                                    <i class="fas fa-user-clock fa-3x mb-3"></i>
                                    <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...";
    
    private Dictionary<string, SpotQueueInfo> spotQueues = new Dictionary<string, SpotQueueInfo>();
    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
    }

    private async Task InitializeSignalR()
    {
        try
        {
            connectionStatus = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...";
            isConnected = false;
            
            // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏≤‡∏Å‡∏°‡∏µ
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
            }

            // ‡πÉ‡∏ä‡πâ URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            var hubUrl = "http://localhost:5041/queuehub";
            Console.WriteLine($"Connecting to SignalR hub at: {hubUrl}");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .WithAutomaticReconnect(new[] {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                })
                .Build();

            hubConnection.On<string, int, string, string>("ReceiveQueueUpdate", 
                (spotPlace, queueNumber, patientName, department) =>
            {
                var spotInfo = new SpotQueueInfo
                {
                    SpotPlace = spotPlace,
                    QueueNumber = queueNumber,
                    PatientName = patientName,
                    Department = department
                };

                spotQueues[spotPlace] = spotInfo;
                StateHasChanged();
            });

            hubConnection.Reconnected += (connectionId) =>
            {
                connectionStatus = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß";
                isConnected = true;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (exception) =>
            {
                connectionStatus = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà...";
                isConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection.Closed += (exception) =>
            {
                connectionStatus = "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î";
                isConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            await hubConnection.StartAsync();
            
            connectionStatus = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß";
            isConnected = true;
            Console.WriteLine("SignalR connection established");


        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
            isConnected = false;
            connectionStatus = "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß";
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

     public class SpotQueueInfo
    {
        public string SpotPlace { get; set; }
        public int QueueNumber { get; set; }
        public string PatientName { get; set; }
        public string Department { get; set; }
    }
}

<style>
    .display-container {
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
        min-height: 100vh;
    }

    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 15px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .connection-status {
        padding: 8px 15px;
        border-radius: 20px;
        font-weight: bold;
        display: flex;
        align-items: center;
    }

    .connection-status.connected {
        background-color: #d4edda;
        color: #155724;
    }

    .connection-status.disconnected {
        background-color: #f8d7da;
        color: #721c24;
    }

    .reconnect-section {
        text-align: center;
        margin: 30px 0;
    }

    .spots-container {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .spot-card {
        border: 2px solid #dee2e6;
        transition: all 0.3s ease;
    }

    .spot-card:hover {
        border-color: #007bff;
        box-shadow: 0 4px 15px rgba(0,123,255,0.2);
        transform: translateY(-5px);
    }

    .spot-card .card-header {
        background-color: #007bff;
        color: white;
        font-weight: bold;
    }

    .queue-number-display {
        margin: 15px 0;
    }

    .queue-number {
        font-size: 48px;
        font-weight: bold;
        color: #007bff;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .patient-info {
        margin-top: 15px;
    }

    .patient-name {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .department {
        font-size: 14px;
        color: #6c757d;
    }

    .no-queue {
        padding: 30px 0;
        color: #6c757d;
    }
</style>
