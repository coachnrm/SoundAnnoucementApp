@page "/eeee"
@using Microsoft.AspNetCore.SignalR.Client
@using SoundAnnoucementApp.Models
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IHttpClientFactory _httpClientFactory
@layout QueueLayout

<div class="display-container">
    <!-- Header Section -->
    <div class="queue-display-section">
        <div class="header-container">
            <div class="header-content">
                <div class="title-section">
                    <div class="hospital-icon">
                        <i class="fas fa-hospital-alt"></i>
                    </div>
                    <div>
                        <h1>จอแสดงคิวซักประวัติ</h1>
                        <p>โรงพยาบาลสมุทรสาคร</p>
                    </div>
                </div>
                <div class="status-section">
                    <div class="connection-status @(isConnected ? "connected" : "disconnected")">
                        <div class="status-indicator"></div>
                        <span>@connectionStatus</span>
                    </div>
                    <div class="current-time">
                        <i class="fas fa-clock"></i>
                        <span>@currentTime</span>
                    </div>
                </div>
            </div>
        </div>

        @if (!isConnected)
        {
            <div class="reconnect-section">
                <div class="reconnect-card">
                    <i class="fas fa-plug disconnected-icon"></i>
                    <h3>การเชื่อมต่อขาดหาย</h3>
                    <p>ไม่สามารถเชื่อมต่อกับเซิร์ฟเวอร์ได้ในขณะนี้</p>
                    <button class="reconnect-btn" @onclick="InitializeSignalR">
                        <i class="fas fa-sync-alt"></i> 
                        <span>เชื่อมต่อใหม่</span>
                    </button>
                </div>
            </div>
        }

        <!-- Queue Display Section -->
        @* <div class="queue-display-section"> *@
            <div class="spots-grid">
                @for (int i = 1; i <= 7; i++)
                {
                    var spotKey = i.ToString();
                    var spotInfo = spotQueues.ContainsKey(spotKey) ? spotQueues[spotKey] : null;
                    
                    <div class="spot-card @(spotInfo != null ? "active" : "inactive")">
                        <div class="spot-header">
                            <div class="spot-number">
                                <i class="fas fa-user-md"></i>
                                <span>ช่องซักประวัติที่ @i</span>
                            </div>
                            <div class="status-indicator"></div>
                        </div>
                        
                        <div class="spot-body">
                            @if (spotInfo != null)
                            {
                                <div class="queue-number-display">
                                    <span class="queue-number">@spotInfo.QueueNumber</span>
                                </div>
                                <div class="patient-info">
                                    <div class="patient-name">
                                        <i class="fas fa-user"></i>
                                        <span>@spotInfo.PatientName</span>
                                    </div>
                                    <div class="department">
                                        <i class="fas fa-stethoscope"></i>
                                        <span>@spotInfo.Department</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="no-queue">
                                    <i class="fas fa-user-clock"></i>
                                    <p>ไม่มีคิวในขณะนี้</p>
                                </div>
                            }
                        </div>
                        
                        <div class="spot-footer">
                            <div class="waiting-text">
                                @if (spotInfo != null)
                                {
                                    <span>กำลังซักประวัติ</span>
                                }
                                else
                                {
                                    <span>พร้อมให้บริการ</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="header-container">
            <div class="header-content">
                <div class="title-section">
                    <div class="hospital-icon">
                        <i class="fas fa-hospital-alt"></i>
                    </div>
                    <div>
                        <h1>จอแสดงคิวเข้าห้องตรวจ</h1>
                        <p>@currentTime</p>
                    </div>
                </div>
                <div class="status-section">
                    <div class="connection-status @(isConnected ? "connected" : "disconnected")">
                        <div class="status-indicator"></div>
                        <span>@connectionStatus</span>
                        @if (!isConnected)
                        {
                            <button class="btn btn-sm btn-outline-primary ms-2" @onclick="ReconnectSignalR" title="เชื่อมต่อใหม่">
                                <i class="fas fa-sync-alt"></i>
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Queue Display Section -->
        <div class="spots-grid">
            @if (isLoading)
            {
                <div class="loading-message">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>กำลังโหลดข้อมูลแผนก...</p>
                </div>
            }
            else if (hasLoadError)
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>ไม่สามารถโหลดข้อมูลแผนกได้</p>
                    <button class="retry-btn" @onclick="RetryLoadDepartments">
                        <i class="fas fa-redo"></i>
                        โหลดใหม่
                    </button>
                </div>
            }
            else if (departments != null && departments.Any())
            {
                @foreach (var department in departments)
                {
                    var spotKey = department.Id.ToString();
                    var spotInfo = spotQueues.ContainsKey(spotKey) ? spotQueues[spotKey] : null;
                    
                    <div class="spot-card @(spotInfo != null ? "active" : "inactive")">
                        <div class="spot-header">
                            <div class="spot-number">
                                <i class="fas fa-user-md"></i>
                                <span>@department.Name</span>
                            </div>
                            <div class="status-indicator"></div>
                        </div>
                        
                        <div class="spot-body">
                            @if (spotInfo != null)
                            {
                                <div class="queue-number-display">
                                    <span class="queue-number">@spotInfo.QueueNumber</span>
                                </div>
                                <div class="patient-info">
                                    <div class="patient-name">
                                        <i class="fas fa-user"></i>
                                        <span>@spotInfo.PatientName</span>
                                    </div>
                                    <div class="department">
                                        <i class="fas fa-stethoscope"></i>
                                        <span>@spotInfo.Department</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="no-queue">
                                    <i class="fas fa-user-clock"></i>
                                    <p>ไม่มีคิวในขณะนี้</p>
                                </div>
                            }
                        </div>
                        
                        <div class="spot-footer">
                            <div class="waiting-text">
                                @if (spotInfo != null)
                                {
                                    <span>กำลังซักประวัติ</span>
                                }
                                else
                                {
                                    <span>พร้อมให้บริการ</span>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-data-message">
                    <i class="fas fa-database"></i>
                    <p>ไม่มีข้อมูลแผนก</p>
                </div>
            }
        </div>
        @* </div> *@
    </div>
</div>
<div class="queue-display-section">
        
    </div>


@code {
      // สำหรับ QueueHub (คิวซักประวัติ)
    private HubConnection hubConnection;
    private bool isConnected = false;
    private string connectionStatus = "กำลังเชื่อมต่อ...";
    private Dictionary<string, SpotQueueInfo> spotQueues = new Dictionary<string, SpotQueueInfo>();
    private string currentTime = DateTime.Now.ToString("HH:mm:ss");
    private Timer timer;

    // สำหรับ DisplayHub (คิวเข้าห้องตรวจ)
    private HubConnection hubConnection1;
    private bool isConnected1 = false;
    private string connectionStatus1 = "กำลังเชื่อมต่อ...";
    private Dictionary<string, SpotQueueInfo> spotQueues1 = new Dictionary<string, SpotQueueInfo>();
    private string currentTime1 = DateTime.Now.ToString("HH:mm:ss");
    private Timer timer1;
    private List<QueueDepartment> departments = new List<QueueDepartment>();
    private bool isLoading = true;
    private bool hasLoadError = false;

    protected override async Task OnInitializedAsync()
    {
        
        await LoadDepartments(); // โหลด departments ก่อน
        await InitializeSignalR();   // สำหรับ QueueHub
        await InitializeSignalR1();  // สำหรับ DisplayHub
        
        // Initialize timer to update current time every second
        timer = new Timer(new TimerCallback(_ =>
        {
            currentTime = DateTime.Now.ToString("HH:mm:ss");
            InvokeAsync(StateHasChanged);
        }), null, 0, 1000);
        timer1 = new Timer(new TimerCallback(_ =>
            {
                currentTime1= DateTime.Now.ToString("HH:mm:ss");
                InvokeAsync(StateHasChanged);
            }), null, 0, 1000);
    }
    

    private async Task InitializeSignalR()
    {
        try
        {
            connectionStatus = "กำลังเชื่อมต่อ...";
            isConnected = false;
            
            // ลบการเชื่อมต่อเดิมหากมี
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
            }

            // ใช้ URL แบบเต็มและถูกต้อง
            var hubUrl = "http://localhost:5041/queuehub";
            Console.WriteLine($"Connecting to SignalR hub at: {hubUrl}");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .WithAutomaticReconnect(new[] {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                })
                .Build();

            hubConnection.On<string, int, string, string>("ReceiveQueueUpdate", 
                async (spotPlace, queueNumber, patientName, department) =>
            {
                var spotInfo = new SpotQueueInfo
                {
                    SpotPlace = spotPlace,
                    QueueNumber = queueNumber,
                    PatientName = patientName,
                    Department = department
                };

                spotQueues[spotPlace] = spotInfo;
                
                // Announce the queue update with sound
                await AnnounceQueue2(queueNumber, patientName, department, spotPlace, 0.7, 1.2, 2.0);
                
                StateHasChanged();
            });

            hubConnection.Reconnected += (connectionId) =>
            {
                connectionStatus = "เชื่อมต่อแล้ว";
                isConnected = true;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (exception) =>
            {
                connectionStatus = "กำลังเชื่อมต่อใหม่...";
                isConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection.Closed += (exception) =>
            {
                connectionStatus = "การเชื่อมต่อถูกปิด";
                isConnected = false;
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            // เริ่มการเชื่อมต่อ
            await hubConnection.StartAsync();
            
            connectionStatus = "เชื่อมต่อแล้ว";
            isConnected = true;
            Console.WriteLine("SignalR connection established");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
            isConnected = false;
            connectionStatus = "เชื่อมต่อล้มเหลว";
        }
        
        // อัพเดท UI
        StateHasChanged();
    }
    private async Task InitializeSignalR1()
    {
        try
        {
            connectionStatus1 = "กำลังเชื่อมต่อ..."; // ใช้ connectionStatus1
            isConnected1 = false; // ใช้ isConnected1
            StateHasChanged();
            
            if (hubConnection1 != null)
            {
                await hubConnection1.StopAsync();
                await hubConnection1.DisposeAsync();
                hubConnection1 = null;
            }

            var hubUrl = "http://localhost:5041/displayhub";
            Console.WriteLine($"Connecting to DisplayHub at: {hubUrl}");
            
            hubConnection1 = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .WithAutomaticReconnect(new[] {
                    TimeSpan.Zero,
                    TimeSpan.FromSeconds(2),
                    TimeSpan.FromSeconds(5),
                    TimeSpan.FromSeconds(10)
                })
                .Build();

            // แก้ไข event handlers ให้ใช้ state ที่ถูกต้อง
            hubConnection1.Reconnecting += (exception) =>
            {
                connectionStatus1 = "กำลังเชื่อมต่อใหม่..."; // ใช้ connectionStatus1
                isConnected1 = false; // ใช้ isConnected1
                Console.WriteLine($"DisplayHub reconnecting: {exception?.Message}");
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection1.Reconnected += (connectionId) =>
            {
                connectionStatus1 = "เชื่อมต่อแล้ว"; // ใช้ connectionStatus1
                isConnected1 = true; // ใช้ isConnected1
                Console.WriteLine($"DisplayHub reconnected: {connectionId}");
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection1.Closed += (exception) =>
            {
                connectionStatus1 = "การเชื่อมต่อถูกปิด"; // ใช้ connectionStatus1
                isConnected1 = false; // ใช้ isConnected1
                Console.WriteLine($"DisplayHub closed: {exception?.Message}");
                InvokeAsync(StateHasChanged);
                return Task.CompletedTask;
            };

            hubConnection1.On<string, int, string, string>("ReceiveQueueUpdate1", 
                (spotPlace, queueNumber, patientName, department) =>
            {
                // 処理ข้อมูล...
            });

            await hubConnection1.StartAsync();
            
            connectionStatus1 = "เชื่อมต่อแล้ว"; // ใช้ connectionStatus1
            isConnected1 = true; // ใช้ isConnected1
            Console.WriteLine("DisplayHub connection established");

            // แก้ไขการเรียกใช้ method ให้ถูก Hub
            try
            {
                await hubConnection1.InvokeAsync("RequestAllQueueData1"); // ใช้ hubConnection1
                Console.WriteLine("Requested all queue data from DisplayHub");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error requesting all queue data: {ex.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DisplayHub connection error: {ex.Message}");
            isConnected1 = false; // ใช้ isConnected1
            connectionStatus1 = "เชื่อมต่อล้มเหลว"; // ใช้ connectionStatus1
        }
        
        await InvokeAsync(StateHasChanged);
    }
     private async Task LoadDepartments()
    {
        try
        {
            isLoading = true;
            hasLoadError = false;
            StateHasChanged();
            
            // เรียก API เพื่อดึงข้อมูลแผนก
            var client = _httpClientFactory.CreateClient("QueueApi");
            var response = await client.GetAsync("api/DepartmentName/DepartmentsNoHx");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var result = JsonSerializer.Deserialize<List<QueueDepartment>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (result != null && result.Any())
                {
                    departments = result;
                }
                else
                {
                    hasLoadError = true;
                    Console.WriteLine("API returned empty department list");
                }
            }
            else
            {
                hasLoadError = true;
                Console.WriteLine($"Failed to load departments: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            hasLoadError = true;
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AnnounceQueue2(int queueNumber, string patientName, string department,  string spotPlace, double rate = 0.7, double pitch = 1.5, double volume = 0.9)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioHelper.announceQueue2", 
                queueNumber, patientName, department, spotPlace, rate, pitch, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error announcing queue: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
        
        timer?.Dispose();
    }
     private async Task ReconnectSignalR()
    {
        await InitializeSignalR1();
    }

    private async Task RetryLoadDepartments()
    {
        await LoadDepartments();
    }

    private async Task AnnounceQueue3(int queueNumber, string patientName, string department,  string spotPlace, double rate = 0.7, double pitch = 1.5, double volume = 0.9)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("audioHelper.announceQueue3", 
                queueNumber, patientName, department, spotPlace, rate, pitch, volume);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error announcing queue: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync1()
    {
        if (hubConnection1 != null)
        {
            await hubConnection1.StopAsync();
            await hubConnection1.DisposeAsync();
        }
        
        timer1?.Dispose();
        timer1 = null;
        
        Console.WriteLine("Component disposed");
    }

    public class Department
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class SpotQueueInfo
    {
        public string SpotPlace { get; set; }
        public int QueueNumber { get; set; }
        public string PatientName { get; set; }
        public string Department { get; set; }
    }
}